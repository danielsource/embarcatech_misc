(MY WAY TO) get started with pico-sdk 2.1.0 on Linux
====

#
# Source/see also: https://datasheets.raspberrypi.com/pico/getting-started-with-pico.pdf
#

# Install the toolchain
sudo apt install \
	build-essential \
	g++ \
	cmake \
	gcc-arm-none-eabi \
	libnewlib-arm-none-eabi \
	libstdc++-arm-none-eabi-newlib \
	libusb-1.0-0-dev

# Set the $PICO_SDK_PATH to your pico-sdk repo path,
#   $PICOTOOL_FETCH_FROM_GIT_PATH to your picotool repo path and
#   add the picotool executable to $PATH
# ...

# Clone the SDK
git clone --recurse-submodules --branch master \
	https://github.com/raspberrypi/pico-sdk.git \
	"$PICO_SDK_PATH"

# Install picotool
git clone https://github.com/raspberrypi/picotool.git "$PICOTOOL_FETCH_FROM_GIT_PATH"
cd "$PICOTOOL_FETCH_FROM_GIT_PATH"
cmake -B build \
	-DCMAKE_INSTALL_PREFIX="$PICOTOOL_FETCH_FROM_GIT_PATH" \
	-DPICOTOOL_FLAT_INSTALL=1
make -C build

# Use the serial connection without "sudo"
sudo cp "$PICOTOOL_FETCH_FROM_GIT_PATH"/udev/99-picotool.rules /etc/udev/rules.d/

# Updating the SDK
cd "$PICO_SDK_PATH"
git pull
git submodule update

# Use the serial connection
minicom -D /dev/ttyACM0 -b 115200
# or with GNU screen
screen /dev/ttyACM0 115200

# ... RTFM :3


Generated files
====

The make process will produce a number of different files. The important ones
are shown in the following table.

+----------------------------------------------------------------------------+
| .bin     Raw binary dump of the program code and data                      |
|----------------------------------------------------------------------------|
| .elf     The full program output, possibly including debug information     |
|----------------------------------------------------------------------------|
| .uf2     The program code and data in a UF2 form that you can              |
|          drag-and-drop on to the device when it is mounted as a USB drive  |
|----------------------------------------------------------------------------|
| .dis     A disassembly of the compiled binary                              |
|----------------------------------------------------------------------------|
| .hex     Hexdump of the compiled binary                                    |
|----------------------------------------------------------------------------|
| .map     A map file to accompany the .elf file describing where the linker |
|          has arranged segments in memory                                   |
+----------------------------------------------------------------------------+


RP2040 Hardware APIs
====

* hardware_adc:        Analog to Digital Converter (ADC) API.
* hardware_base:       Low-level types and (atomic) accessors for
                       memory-mapped hardware registers.
* hardware_claim:      Lightweight hardware resource management API.
* hardware_clocks:     Clock Management API.
* hardware_divider:    RP2040 Low Low-level hardware-divider API.
* hardware_dma:        DMA Controller API.
  * channel_config:    DMA channel configuration.
* hardware_exception:  Methods for setting processor exception handlers.
* hardware_flash:      Low level flash programming and erase API.
* hardware_gpio:       General Purpose Input/Output (GPIO) API.
* hardware_i2c:        I2C Controller API.
* hardware_interp:     Hardware Interpolator API.
  * interp_config:     Interpolator configuration.
* hardware_irq:        Hardware interrupt handling API.
* hardware_pio:        Programmable I/O (PIO) API.
  * sm_config:         PIO state machine configuration.
  * pio_instructions:  PIO instruction encoding.
* hardware_pll:        Phase Locked Loop control APIs.
* hardware_pwm:        Hardware Pulse Width Modulation (PWM) API.
* hardware_resets:     Hardware Reset API.
* hardware_rtc:        Hardware Real Time Clock API.
* hardware_spi:        Hardware SPI API.
* hardware_sync:       Low level hardware spin locks, barrier and
                       processor event APIs.
* hardware_ticks:      Hardware Tick API.
* hardware_timer:      Low-level hardware timer API.
* hardware_uart:       Hardware UART API.
* hardware_vreg:       Voltage Regulation API.
* hardware_watchdog:   Hardware Watchdog Timer API.
* hardware_xip_cache:  Low-level cache maintenance operations for the
                       XIP cache.
* hardware_xosc:       Crystal Oscillator (XOSC) API.


vim: set ft=conf:
